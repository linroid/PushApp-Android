apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.hugo'
apply plugin: 'com.neenbedankt.android-apt'

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.
def buildTime = new Date().format("yyyy-MM-dd HH:mm", TimeZone.getTimeZone("GMT+8:00"))

def Properties props
File appPropFile = file('app.properties');
if (appPropFile.exists()) {
    props = new Properties()
    props.load(new FileInputStream(appPropFile))
}

android {
    compileSdkVersion 22
    buildToolsVersion "23.0.0 rc2"

    defaultConfig {
        applicationId "com.linroid.pushapp"
        minSdkVersion 14
        targetSdkVersion 22
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""
        println(new File("./app/nobug.txt").getText("UTF-8"))
        manifestPlaceholders = [JPUSH_CHANNEL: "default", PACKAGE: applicationId]
    }
    signingConfigs {
        debug {
            // No debug config
        }

        release {
        }
    }
    buildTypes {
        allprojects {
            if (props) {
                manifestPlaceholders.put("JPUSH_APPKEY", props['JPUSH_APPKEY'] as String)
            }
        }
        debug {
            applicationIdSuffix ".dev"
            versionNameSuffix '-dev'
            shrinkResources false
            minifyEnabled false
            zipAlignEnabled false
            signingConfig signingConfigs.debug
            manifestPlaceholders = [JPUSH_CHANNEL: "default", PACKAGE: defaultConfig.applicationId + applicationIdSuffix]
            if (props) {
                manifestPlaceholders.put("JPUSH_APPKEY", props['DEBUG_JPUSH_APPKEY'] as String)
            }
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        all { type ->
            def host
            if (type == debug) {
                def hostIp = InetAddress.getLocalHost().getHostAddress()
                host = "pushapp.${hostIp}.xip.io"
                println("You can open the homepage: http://${host}")
            } else if (type == release) {
                host = "pushapp.io"
            } else {
                return
            }
            type.buildConfigField "String", "ENDPOINT", "\"http://${host}/api\""
            type.buildConfigField "String", "HOST", "\"${host}\""
            type.buildConfigField "String", "HOST_URL", "\"http://${host}\""

            type.resValue "string", "endpoint", "http://${host}/api"
            type.resValue "string", "host", "${host}"
            type.resValue "string", "host_url", "http://${host}"
        }
    }

    lintOptions {
        disable 'InvalidPackage'
        abortOnError false
    }
    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
    }


}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:support-v4:22.2.0'
    apt 'com.google.dagger:dagger-compiler:2.0.1'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'com.android.support:appcompat-v7:22.2.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'
    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.android.support:design:22.2.0'
    compile 'com.android.support:support-v4:22.2.0'
    compile 'com.android.support:cardview-v7:22.2.0'
    compile 'com.google.code.gson:gson:2.3'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'com.android.support:recyclerview-v7:22.2.0'
    compile 'com.google.dagger:dagger:2.0.1'
    compile 'com.jakewharton.timber:timber:3.1.0'
    compile 'com.journeyapps:zxing-android-embedded:3.0.2@aar'
    compile 'com.google.zxing:core:3.2.0'
    compile 'com.facebook.stetho:stetho:1.1.1'
    compile 'com.facebook.stetho:stetho-okhttp:1.1.1'
    compile 'com.facebook.fresco:fresco:0.6.0'
    compile 'com.facebook.fresco:imagepipeline-okhttp:0.6.0'
    compile 'com.mani:thindownloadmanager:1.0.0'
//        compile 'com.github.bunnyblue:ApkAutoInstaller:V1.0.0'
}


File signPropFile = file('signing.properties');
if (signPropFile.exists()) {
    def Properties signProps = new Properties()
    signProps.load(new FileInputStream(signPropFile))

    if (signProps.containsKey('STORE_FILE') && signProps.containsKey('STORE_PASSWORD') &&
            signProps.containsKey('KEY_ALIAS') && signProps.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.release.storeFile = file(signProps['STORE_FILE'])
        android.signingConfigs.release.storePassword = signProps['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = signProps['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = signProps['KEY_PASSWORD']
    } else {
        android.buildTypes.release.signingConfig = null
    }
} else {
    android.buildTypes.release.signingConfig = null
}